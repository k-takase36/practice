# 変数
# 変数とは、値を入れておく箱のようなもの。この変数を使用すると、以下のようなメリットがある。

# 値を使いまわせる
# 値を覚える必要がなくなる
# 変更に強いプログラムが組める


# 定義と代入

# name が変数
# "taka" が変数に格納する値
# name = "taka"
# itemo = "book"
# price = 980

# 式展開するとき
# name = "taka"
# # 式展開を書くと表示される
# puts "Hello!! #{name}"
# # そのまま変数名を書くと変数の値は表示されない
# puts "Hello!! name"

# name = "taka"
# # ヒアドキュメントの中で式展開
# puts <<~TEXT
# Hello!! #{name}
# You are very cool!!
# Let's enjoy programing together!!
# TEXT

# ①変数を定義するときは、まず値を格納するところからがスタート
# その際、どういうデータを格納する変数かがわかりやすいような変数名をつけてあげると、コードがグッと読みやすくなる。

# # 名前を入れる変数
# name = "taka"
# # 年齢情報を入れる変数
# age = 33
# # 住所情報を入れる変数
# address = "saitama"
# # 電話番号情報を入れる変数
# tell = "123-456-7890"


# ②変数に格納した値を、式展開を用いてわかりやすい文章で表示してみる。

# # 名前を入れる変数
# name = "taka"
# # 年齢情報を入れる変数
# age = 33
# # 住所情報を入れる変数
# address = "saitama"
# # 電話番号情報を入れる変数
# tell = "123-456-7890"

# # 変数に格納したデータを式展開で表示
# puts "【自己紹介】"
# puts "私の名前は#{name}です。"
# puts "年齢は#{age}です。"
# puts "今住んでいるところは#{address}です。"
# puts "電話番号は#{tell}です。"
# puts "どうぞ宜しくお願いいたします！"


# ③次はそれらのコードをヒアドキュメントに置き換えてリファクタリング
# リファクタリングとは、実行結果は変更せずにコードを改善すること。
# これにより、コードの見やすさや処理効率が良くなる

# # 名前を入れる変数
# name = "taka"
# # 年齢情報を入れる変数
# age = 33
# # 住所情報を入れる変数
# address = "saitama"
# # 電話番号情報を入れる変数
# tell = "123-456-7890"

# # 変数に格納したデータを式展開で表示
# puts <<~TEXT 
# 【自己紹介】
# 私の名前は#{name}です。
# 年齢は#{age}です。
# 今住んでいるところは#{address}です。
# 電話番号は#{tell}です。
# どうぞよろしくお願いいたします！！
# TEXT

# オリジナルプログラム作成

# うちの子供が好きなものプログラム
# 遊びを入れる変数
play = "押入れの中"
# おもちゃを入れる変数
toy = "黒の油性ペン"
# 食べ物を入れる変数
food = "絹ごし豆腐"
# 歌を入れる変数
song = "出前館のCM"
# キャラを入れる変数
character = "サボさん"

puts <<~TEXT
【うちの子供が好きなもの】
遊び：#{play}
おもちゃ：#{toy}
食べ物：#{food}
歌：#{song}
キャラ：#{character}
TEXT


